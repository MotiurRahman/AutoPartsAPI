#!/usr/bin/env node

const app = require("../app");
const debug = require("debug")("assignment:server");
const http = require("http");
const runMigrations = require("../sequelize.migrate");
const { sequelize } = require("../config/db");
require("../models/User"); // register models

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

const server = http.createServer(app);

(async () => {
    try {
        await sequelize.authenticate();
        console.log("✅ DB connected");

        // Run migrations before syncing
        await runMigrations();
        console.log("✅ Migrations executed");

        // For dev only (auto-create or alter tables)
        await sequelize.sync({ alter: true });
        console.log("✅ DB synced");

        server.listen(port);
        server.on("error", onError);
        server.on("listening", onListening);

        console.log(`🚀 Server running on port ${port}`);
    } catch (err) {
        console.error("❌ DB init error:", err);
        process.exit(1);
    }
})();

function normalizePort(val) {
    const port = parseInt(val, 10);
    if (isNaN(port)) return val;
    if (port >= 0) return port;
    return false;
}

function onError(error) {
    if (error.syscall !== "listen") throw error;
    const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
        default:
            throw error;
    }
}

function onListening() {
    const addr = server.address();
    const bind =
        typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}
